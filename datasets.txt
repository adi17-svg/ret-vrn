1001_DFA_ANG_XX.wav
1001_DFA_DIS_XX.wav
1001_DFA_FEA_XX.wav 
1001_DFA_HAP_XX.wav 
1001_DFA_NEU_XX.wav 
1001_DFA_SAD_XX.wav 
1001_IEO_ANG_HI.wav 
1001_IEO_ANG_LO.wav 
1001_IEO_ANG_MD.wav 
1001_IEO_DIS_HI.wav 
1001_IEO_DIS_LO.wav 
1001_IEO_DIS_MD.wav 
1001_IEO_FEA_HI.wav 
1001_IEO_FEA_LO.wav 
1001_IEO_FEA_MD.wav 
1001_IEO_HAP_HI.wav 
1001_IEO_HAP_LO.wav 
1001_IEO_HAP_MD.wav 
1001_IEO_NEU_XX.wav 
1001_IEO_SAD_HI.wav 
1001_IEO_SAD_LO.wav 
1001_IEO_SAD_MD.wav 
1001_IOM_ANG_XX.wav 
1001_IOM_DIS_XX.wav 
1001_IOM_FEA_XX.wav 
1001_IOM_HAP_XX.wav 
1001_IOM_NEU_XX.wav 
1001_IOM_SAD_XX.wav 
1001_ITH_ANG_XX.wav 
1001_ITH_DIS_XX.wav 
1001_ITH_FEA_XX.wav 
1001_ITH_HAP_XX.wav 
1001_ITH_NEU_XX.wav 
1001_ITH_SAD_XX.wav 
1001_ITS_ANG_XX.wav 
1001_ITS_DIS_XX.wav 
1001_ITS_FEA_XX.wav 
1001_ITS_HAP_XX.wav 
1001_ITS_NEU_XX.wav 
1001_ITS_SAD_XX.wav 
1001_IWL_ANG_XX.wav 
1001_IWL_DIS_XX.wav 
1001_IWL_FEA_XX.wav 
1001_IWL_HAP_XX.wav 
1001_IWL_NEU_XX.wav 
1001_IWL_SAD_XX.wav 
1001_IWW_ANG_XX.wav 
1001_IWW_DIS_XX.wav 
1001_IWW_FEA_XX.wav 
1001_IWW_HAP_XX.wav 
1001_IWW_NEU_XX.wav 
1001_IWW_SAD_XX.wav 
1001_MTI_ANG_XX.wav 
1001_MTI_DIS_XX.wav 
1001_MTI_FEA_XX.wav 
1001_MTI_HAP_XX.wav 
1001_MTI_NEU_XX.wav 
1001_MTI_SAD_XX.wav 
1001_TAI_ANG_XX.wav 
1001_TAI_DIS_XX.wav 
1001_TAI_FEA_XX.wav 
1001_TAI_HAP_XX.wav 
1001_TAI_NEU_XX.wav 
1001_TAI_SAD_XX.wav 
1001_TIE_ANG_XX.wav 
1001_TIE_DIS_XX.wav 
1001_TIE_FEA_XX.wav 
1001_TIE_HAP_XX.wav 
1001_TIE_NEU_XX.wav 
1001_TIE_SAD_XX.wav 
1001_TSI_ANG_XX.wav 
1001_TSI_DIS_XX.wav 
1001_TSI_FEA_XX.wav 
1001_TSI_HAP_XX.wav 
1001_TSI_NEU_XX.wav 
1001_TSI_SAD_XX.wav 
1001_WSI_ANG_XX.wav 
1001_WSI_DIS_XX.wav 
1001_WSI_FEA_XX.wav 
1001_WSI_HAP_XX.wav 
1001_WSI_NEU_XX.wav 
1001_WSI_SAD_XX.wav 

import os
import pandas as pd

# Emotion normalization mapping
emotion_map = {
    'ANG': 'angry',
    'DIS': 'disgust',
    'FEA': 'fear',
    'HAP': 'happy',
    'NEU': 'neutral',
    'SAD': 'sad'
}

# Define final usable emotions
FINAL_LABELS = list(emotion_map.values())

def extract_crema_d():
    crema_path = "datasets/crema-d/"
    data = []

    for file in os.listdir(crema_path):
        if file.endswith(".wav"):
            try:
                filename = file.replace('.wav', '')
                actor_id, modality, emotion_code, intensity = filename.split('_')
                label = emotion_map.get(emotion_code)
                if label in FINAL_LABELS:
                    data.append({
                        "path": os.path.join(crema_path, file),
                        "label": label,
                        "actor_id": int(actor_id),
                        "modality": modality,
                        "intensity": intensity
                    })
            except ValueError:
                # Skip files that don't follow the expected pattern
                continue

    return pd.DataFrame(data)
